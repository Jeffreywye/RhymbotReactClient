{"version":3,"sources":["components/SearchFormComponent/SearchForm.js","components/RhymeListComponent/RhymeList.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","id","onSubmit","type","name","placeholder","defaultValue","value","RhymeList","input","data","map","rhyme","index","arr","key","App","useState","_rhyme_data","setRhymeData","_display_rhyme_not_found","setDisplayRhymeNotFound","_input","setInput","getRhymeQuery","event","a","preventDefault","searchVal","target","children","SearchPhrase","topK","TopK","pre_suf_value","PreSufVal","regex","match","url","translatePhraseToQueryString","fetch","request","json","length","phrases","replace","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sQAgDeA,G,MA9CI,SAACC,GAChB,OACI,yBAAKC,UAAU,wBACX,0BACIA,UAAU,MACVC,GAAG,aACHC,SAAUH,EAAMG,UAEhB,2BACIF,UAAU,mCACVG,KAAK,OACLC,KAAK,eACLC,YAAY,kBAEhB,4BACIL,UAAU,yBACVM,aAAa,SACbF,KAAK,aAEL,4BAAQG,MAAM,UAAd,gBACA,4BAAQA,MAAM,UAAd,iBAGJ,4BACIP,UAAU,yBACVM,aAAa,IACbF,KAAK,QAEL,4BAAQG,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,MAAd,MACA,4BAAQA,MAAM,OAAd,QAEJ,4BACIP,UAAU,sCACVG,KAAK,UAFT,cCjBDK,EAjBG,SAACT,GACf,OACI,yBAAKC,UAAY,wBACb,yBAAKA,UAAY,cACb,wBAAIA,UAAU,cACV,wBAAIA,UAAU,0BAAd,yBAA8DD,EAAMU,OACnEV,EAAMW,KAAKC,KACR,SAACC,EAAOC,EAAOC,GAAf,OACI,wBAAId,UAAU,kBAAkBe,IAAKH,GAAQA,UCgE1DI,MArEf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACNC,EADM,KACOC,EADP,OAE+CF,oBAAS,GAFxD,mBAENG,EAFM,KAEoBC,EAFpB,OAGcJ,mBAAS,IAHvB,mBAGNK,EAHM,KAGEC,EAHF,KAKPC,EAAa,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,yDACpBD,EAAME,iBACFC,EAAYH,EAAMI,OAAOC,SAASC,aAAaxB,MAC/CyB,EAAOP,EAAMI,OAAOC,SAASG,KAAK1B,MAClC2B,EAAgBT,EAAMI,OAAOC,SAASK,UAAU5B,MAEhD6B,EAAQ,oBACRR,EAAUS,MAAMD,GAPA,wBAQdE,EAAMC,EAA6BX,EAAUI,EAAME,GARrC,SASEM,MAAMF,GATR,cASdG,EATc,iBAUDA,EAAQC,OAVP,QAWE,KADhBhC,EAVc,QAWTiC,OACPtB,GAAwB,IAGxBA,GAAwB,GACxBF,EAAaT,GACba,EAASK,IAjBO,wBAqBlBP,GAAwB,GArBN,4CAAH,sDAyBnB,SAASkB,EAA6BK,EAASZ,EAAME,GACnD,IAAII,EAAM,+CAKV,OADAA,EAAMA,GAHU,UAAYM,EAAQC,QAAQ,OAAO,OACrC,SAAWb,IACT,cAAgBE,GAIlC,OACE,yBAAKlC,UAAU,OACb,yBAAKA,UAAU,aACb,6BAASC,GAAG,uBAAuBD,UAAY,QAC7C,kBAAC,EAAD,CACEE,SAAUsB,KAId,6BAASvB,GAAG,iBACTmB,GACD,6BACE,wBAAIpB,UAAU,eAAd,oCAKoB,IAAvBkB,EAAYyB,QACb,6BAAS1C,GAAG,qBAAqBD,UAAU,QACzC,kBAAC,EAAD,CACEU,KAAQQ,EACRT,MAASa,QCpDDwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2DCXNa,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.210b294d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SearchForm = (props) => {\r\n    return (\r\n        <div className=\"rhyme-form-container\">\r\n            <form\r\n                className=\"row\"\r\n                id=\"rhyme-form\"\r\n                onSubmit={props.onSubmit}\r\n            >\r\n                <input\r\n                    className=\"search-bar form-control col-sm-6\"\r\n                    type=\"text\"\r\n                    name=\"SearchPhrase\"\r\n                    placeholder=\"Enter a Rhyme\"\r\n                />\r\n                <select\r\n                    className=\"custom-select col-sm-2\"\r\n                    defaultValue=\"Suffix\"\r\n                    name=\"PreSufVal\"\r\n                >\r\n                    <option value=\"Suffix\">Suffix Based</option>\r\n                    <option value=\"Prefix\">Prefix Based</option>\r\n\r\n                </select>\r\n                <select \r\n                    className=\"custom-select col-sm-2\"\r\n                    defaultValue=\"5\"\r\n                    name=\"TopK\"\r\n                >\r\n                    <option value=\"5\">5</option>\r\n                    <option value=\"10\">10</option>\r\n                    <option value=\"25\">25</option>\r\n                    <option value=\"50\">50</option>\r\n                    <option value=\"100\">100</option>\r\n                </select>\r\n                <button\r\n                    className=\"search-btn btn btn-primary col-sm-2\"\r\n                    type=\"submit\"\r\n                >\r\n                    search\r\n                </button>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchForm;","import React from \"react\";\r\n\r\nconst RhymeList = (props) => {\r\n    return (\r\n        <div className = \"rhyme-list-container\">\r\n            <div className = \"rhyme-list\">\r\n                <ul className=\"list-group\">\r\n                    <li className=\"list-group-item active\">Words that rhyme with {props.input}</li>\r\n                    {props.data.map( \r\n                        (rhyme, index, arr) => (\r\n                            <li className=\"list-group-item\" key={rhyme}>{rhyme}</li>\r\n                        )\r\n                    )}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RhymeList;","import React, {useState, useEffect} from 'react';\r\nimport './App.css';\r\nimport SearchForm from \"./components/SearchFormComponent/SearchForm\"\r\nimport RhymeList from \"./components/RhymeListComponent/RhymeList\"\r\n\r\nfunction App() {\r\n  const [_rhyme_data, setRhymeData] = useState([]);\r\n  const [_display_rhyme_not_found, setDisplayRhymeNotFound] = useState(false);\r\n  const [_input, setInput] = useState(\"\");\r\n\r\n  const getRhymeQuery = async (event) => {\r\n    event.preventDefault();\r\n    let searchVal = event.target.children.SearchPhrase.value;\r\n    let topK = event.target.children.TopK.value;\r\n    let pre_suf_value = event.target.children.PreSufVal.value;\r\n    \r\n    let regex = /^[0-9a-zA-Z\\s]+$/;\r\n    if (searchVal.match(regex)){\r\n      let url = translatePhraseToQueryString(searchVal,topK, pre_suf_value);\r\n      let request = await fetch(url);\r\n      let data = await request.json();\r\n      if (data.length === 0){\r\n        setDisplayRhymeNotFound(true);\r\n      }\r\n      else{\r\n        setDisplayRhymeNotFound(false);\r\n        setRhymeData(data);\r\n        setInput(searchVal);\r\n      }\r\n    }\r\n    else{\r\n      setDisplayRhymeNotFound(true);\r\n    }\r\n  }\r\n\r\n  function translatePhraseToQueryString(phrases, topK, pre_suf_value){\r\n    let url = \"https://guarded-sea-48232.herokuapp.com/api?\";\r\n    let urlPhrase = \"phrase=\" + phrases.replace(/\\s+/g,\"_\");\r\n    let urlTopK = \"&topK=\" + topK;\r\n    let urlPreSuf = \"&preSufVal=\" + pre_suf_value;\r\n    url = url + urlPhrase + urlTopK + urlPreSuf;\r\n    return url;\r\n  }\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        <section id=\"rhyme-search-section\" className = \"my-5\">\r\n          <SearchForm\r\n            onSubmit={getRhymeQuery}\r\n          />\r\n        </section>\r\n\r\n        <section id=\"error message\">\r\n          {_display_rhyme_not_found &&\r\n          <div>\r\n            <h3 className=\"text-danger\">No rhymes found for that input</h3>\r\n          </div>\r\n          }\r\n        </section>\r\n\r\n        {_rhyme_data.length !== 0 &&\r\n        <section id=\"rhyme-list-section\" className=\"my-5\">\r\n          <RhymeList\r\n            data = {_rhyme_data}\r\n            input = {_input}\r\n          />\r\n        </section>\r\n        }\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}